Description: version.h is in a different location for 3.7
Author: Dmitrijs Ledkovs <dmitrij.ledkov@ubuntu.com>

--- a/driver/Makefile
+++ b/driver/Makefile
@@ -123,6 +123,9 @@
 OBJS += workqueue.o
 endif
 
+ifneq (,$(wildcard $(KBUILD)/include/generated/uapi/linux/version.h))
+EXTRA_CFLAGS += -DUAPI
+endif
 
 all: config_check modules
 
@@ -157,7 +160,7 @@
 
 
 config_check:
-	@if [ ! -f $(KBUILD)/include/linux/version.h ]; then \
+	@if [ ! -f $(KBUILD)/include/linux/version.h ] && [ ! -f $(KBUILD)/include/generated/uapi/linux/version.h ]; then \
 		echo; echo; \
 		echo "Cannot find kernel build files in $(KBUILD)"; \
 		echo "Please give the path to kernel build directory with" ; \
--- a/driver/ntoskernel.h
+++ b/driver/ntoskernel.h
@@ -36,7 +36,11 @@
 #include <linux/usb.h>
 #include <linux/spinlock.h>
 #include <asm/mman.h>
+#ifdef UAPI
+#include <generated/uapi/linux/version.h>
+#else
 #include <linux/version.h>
+#endif
 #include <linux/etherdevice.h>
 #include <net/iw_handler.h>
 #include <linux/ethtool.h>
@@ -204,19 +208,6 @@
 void wrap_cancel_work(struct work_struct *work);
 void wrap_flush_wq(struct workqueue_struct *workq);
 
-#else // WRAP_WQ
-
-/* Compatibility for Linux before 2.6.20 where INIT_WORK takes 3 arguments */
-#if !defined(INIT_WORK_NAR) && !defined(INIT_DELAYED_WORK_DEFERRABLE)
-typedef void (*compat_work_func_t)(void *work);
-typedef void (*work_func_t)(struct work_struct *work);
-static inline void (INIT_WORK)(struct work_struct *work, work_func_t func)
-{
-	INIT_WORK(work, (compat_work_func_t)func, work);
-}
-#undef INIT_WORK
-#endif
-
 #endif // WRAP_WQ
 
 #if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,18)
--- a/driver/iw_ndis.c
+++ b/driver/iw_ndis.c
@@ -13,7 +13,11 @@
  *
  */
 
+#ifdef UAPI
+#include <generated/uapi/linux/version.h>
+#else
 #include <linux/version.h>
+#endif
 #include <linux/wireless.h>
 #include <linux/netdevice.h>
 #include <linux/etherdevice.h>
--- a/driver/wrapndis.c	2012/03/26 17:00:31	3107
+++ b/driver/wrapndis.c	2012/03/26 17:01:18	3108
@@ -1675,6 +1675,7 @@
 	return 0;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0)
 static u32 ndis_get_tx_csum(struct net_device *dev)
 {
 	struct ndis_device *wnd = netdev_priv(dev);
@@ -1735,18 +1736,21 @@
 	else
 		return -EOPNOTSUPP;
 }
+#endif
 
 static struct ethtool_ops ndis_ethtool_ops = {
 	.get_drvinfo	= ndis_get_drvinfo,
 	.get_link	= ndis_get_link,
 	.get_wol	= ndis_get_wol,
 	.set_wol	= ndis_set_wol,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0)
 	.get_tx_csum	= ndis_get_tx_csum,
 	.get_rx_csum	= ndis_get_rx_csum,
 	.set_tx_csum	= ndis_set_tx_csum,
 	.set_rx_csum	= ndis_set_rx_csum,
 	.get_sg		= ndis_get_sg,
 	.set_sg		= ndis_set_sg,
+#endif
 };
 
 static int notifier_event(struct notifier_block *notifier, unsigned long event,
--- a/driver/ndis.c	2011/10/04 15:31:37	3085
+++ b/driver/ndis.c	2012/03/26 17:00:31	3107
@@ -2654,9 +2654,15 @@
 	(ULONG *idle, ULONG *kernel_user, ULONG *index)
 {
 	int cpu = smp_processor_id();
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
+	*idle = kcpustat_cpu(cpu).cpustat[CPUTIME_IDLE];
+	*kernel_user = kcpustat_cpu(cpu).cpustat[CPUTIME_SYSTEM] +
+		kcpustat_cpu(cpu).cpustat[CPUTIME_USER];
+#else
 	*idle = kstat_cpu(cpu).cpustat.idle;
 	*kernel_user = kstat_cpu(cpu).cpustat.system +
 		kstat_cpu(cpu).cpustat.user;
+#endif
 	*index = cpu;
 }
 
